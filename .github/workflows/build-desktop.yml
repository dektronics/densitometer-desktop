#--------------------------------------------------------------------------------
# Workflow configuration
#--------------------------------------------------------------------------------

name: build-desktop
on:
  workflow_dispatch:

#--------------------------------------------------------------------------------
# Define application name & version
#--------------------------------------------------------------------------------

env:
  VERSION: "1.1.0"
  EXECUTABLE: "densitometer"
  APPLICATION: "Printalyzer Densitometer Desktop"

#--------------------------------------------------------------------------------
# Workflow jobs (GNU/Linux, macOS & Windows)
#--------------------------------------------------------------------------------

jobs:
  #
  # GNU/Linux build (we run on Ubuntu 20.04 to generate AppImage)
  #
  build-linux:
    runs-on: ubuntu-20.04
    steps:
      #
      # Checkout the repository
      #
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      #
      # Prepare correct CMake version
      #
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.25.x'

      #
      # Install Qt
      #
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.1'
          modules: 'qtserialport'
          cache: 'true'
          
      #
      # Install additional dependencies, stolen from:
      # https://github.com/mapeditor/tiled/blob/master/.github/workflows/packages.yml
      #
      - name: Install dependencies
        run: |
             sudo apt-get update
             sudo apt-get install libgl1-mesa-dev libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-render-util0 libxcb-xinerama0 libzstd-dev libudev-dev libusb-1.0-0-dev libhidapi-dev
        
      #
      # Compile the application
      #
      - name: Configure
        working-directory: ${{github.workspace}}
        run: cmake . -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -B ${{github.workspace}}/build

      - name: Build
        working-directory: ${{github.workspace}}/build
        run: make -j $(nproc)
        
      #
      # Create the AppImage
      #
      - name: Create AppImage
        working-directory: ${{github.workspace}}/build
        run: |
             make DESTDIR=appdir install
             wget -c -nv "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage" -O linuxdeployqt
             chmod a+x linuxdeployqt
             mkdir -p appdir/usr/share/applications
             mkdir -p appdir/usr/share/icons
             cp ../deploy/linux/*.desktop appdir/usr/share/applications/
             cp ../deploy/linux/*.png appdir/usr/share/icons/
             ./linuxdeployqt appdir/usr/share/applications/*.desktop -appimage
     
      #
      # Rename AppImage to match "%AppName%-%Version%-Linux.AppImage" format
      #
      - name: Rename AppImage
        working-directory: ${{github.workspace}}/build
        run: mv *.AppImage ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage
        
      #
      # Upload AppImage to build artifacts
      #
      - name: Upload AppImage
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage
          path: ${{github.workspace}}/build/${{env.EXECUTABLE}}-${{env.VERSION}}-Linux.AppImage
             
  #
  # macOS build
  #
  build-mac:
    runs-on: macos-latest
    steps:
      #
      # Checkout the repository
      #
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      #
      # Prepare correct CMake version
      #
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.25.x'

      #
      # Install Qt
      #
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.1'
          modules: 'qtserialport'
          cache: 'true'
      
      #
      # Compile application
      #
      - name: Configure
        working-directory: ${{github.workspace}}
        run: cmake . -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -B ${{github.workspace}}/build

      - name: Build
        working-directory: ${{github.workspace}}/build
        run: make -j $(nproc)
             
      #
      # Deploy application
      #
      - name: Deploy app
        working-directory: ${{github.workspace}}/build
        run: |
             macdeployqt ${{env.EXECUTABLE}}.app
             mv "${{env.EXECUTABLE}}.app" "${{env.APPLICATION}}.app"  
      
      #
      # ZIP application "%AppName%-%Version%-macOS.zip"
      # We use ditto instead of zip to use the same commands as Finder
      #
      - name: Create ZIP file
        working-directory: ${{github.workspace}}/build
        run: |
             ditto -c -k --sequesterRsrc --keepParent "${{env.APPLICATION}}.app" ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS.zip
     
      #
      # Upload ZIP to build artifacts
      #
      - name: Upload ZIP
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS.zip
          path: ${{github.workspace}}/build/${{env.EXECUTABLE}}-${{env.VERSION}}-macOS.zip
          
  #
  # Windows build
  #
  build-windows:
    runs-on: windows-latest
    steps:
      #
      # Checkout the repository
      #
      - name: Checkout repository and submodules
        uses: actions/checkout@v2
        with:
          submodules: recursive

      #
      # Prepare correct CMake version
      #
      - name: Setup cmake
        uses: jwlawson/actions-setup-cmake@v2
        with:
          cmake-version: '3.25.x'

      #
      # Configure MSVC
      #
      - name: Configure MSVC
        uses: ilammy/msvc-dev-cmd@v1
        with:
          arch: x64
          spectre: true

      #
      # Install Qt
      #
      - name: Install Qt
        uses: jurplel/install-qt-action@v4
        with:
          version: '6.8.1'
          modules: 'qtserialport'
          cache: 'true'
          
      #
      # Install NSIS
      #  
      - name: Install NSIS
        run: |
             (New-Object System.Net.WebClient).DownloadFile('https://get.scoop.sh', 'scoop.ps1') 
             ./scoop.ps1 -RunAsAdmin
             scoop bucket add extras
             scoop install nsis
 
      #
      # Compile application
      #
      - name: Configure
        working-directory: ${{github.workspace}}
        run: cmake . -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX=/usr -G "NMake Makefiles" -B ${{github.workspace}}/build

      - name: Build
        working-directory: ${{github.workspace}}/build
        run: nmake
             
      #
      # Copy Qt & OpenSSL DLLs, compiler runtime & application icon
      #       
      - name: Deploy
        working-directory: ${{github.workspace}}/build
        run: |
             mkdir bin
             move ${{env.EXECUTABLE}}.exe bin
             windeployqt bin/${{env.EXECUTABLE}}.exe --compiler-runtime
             mkdir "${{env.APPLICATION}}"
             move bin "${{env.APPLICATION}}"
             xcopy ..\deploy\windows\resources\icon.ico "${{env.APPLICATION}}"
             xcopy ..\deploy\windows\openssl\*.dll "${{env.APPLICATION}}\bin"
      
      #
      # Create NSIS installer
      #
      - name: Make NSIS installer
        working-directory: ${{github.workspace}}/build
        run: |
             move "${{env.APPLICATION}}" ..\deploy\windows\nsis\
             cd ..\deploy\windows\nsis
             makensis /X"SetCompressor /FINAL lzma" setup.nsi
             ren *.exe ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe
             
      #
      # Upload installer to build artifacts
      #
      - name: Upload NSIS installer
        uses: actions/upload-artifact@v4
        with:
          name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe
          path: ${{github.workspace}}/deploy/windows/nsis/${{env.EXECUTABLE}}-${{env.VERSION}}-Windows.exe
